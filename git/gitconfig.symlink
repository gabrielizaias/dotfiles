[user]
	name = Gabriel Izaias
	email = gabriel.izaias@gmail.com

[alias]
	# View abbreviated SHA, description, and history graph of the latest 30 commits
	l = log --pretty=format:'%Cgreen%h%Creset%C(yellow)%d%Creset %s %C(cyan)%cn%Creset %C(yellow)%cr%Creset'
	today = !git log --since yesterday --author $(git config user.email) --oneline --abbrev-commit --date=relative
	# View the current working tree status using the short format
	s = status -s
	# View the current working tree status using the normal format
	st = status
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git fetch -p; git submodule foreach git pull origin master"
	# Locally ignore changes to file(s)
	bypass = update-index --assume-unchanged
	# Locally un-ignore changes to file(s)
	no-bypass = update-index --no-assume-unchanged
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !git add -A && git commit -v
	# Commit all changes with -m
	cam = !git add -A && git commit -v -m
	# Commit -m shorhand, cuz I'm lazy
	cm = commit  -m
	# Merge branches, keeping historical existence of the merged branch
	m = merge --no-ff
	# Merge branch and delete the merged branch
	md = !"git m $1 && git bd $1"
	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	# Switch to a branch, without resetting it
	ck = checkout
	# Delete branch if it was merged previously
	bd = branch -d
	# Delete any local branch which has been deleted from the remote
	prune = fetch --prune
	# Un-commit latest commit and add its changes to working tree
	undo = reset --soft HEAD^
	# When you stash, catch the new files you haven’t caught with a git add yet
	sh = stash save --include-untracked
	# Show the original commit being rebased
	original = "!git show $(cat .git/rebase-apply/original-commit)"
	# Show verbose output about tags, branches or remotes
	t = tag -l
	b = branch -a
	r = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Remove branches that have already been merged with master
	dm = "!git branch --merged HEAD --no-color | grep -v '\\*' | xargs -n 1 git branch -d"

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of
	# a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	editor = vim
	pager = diff-so-fancy | less --tabs=4 -RFX

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = always

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = cyan

[color "diff"]
	commit = green
	meta = yellow
	frag = cyan
	old = red
	new = green
	whitespace = red reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green
	newHighlight = green 22

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[rebase]
	# Automatically stash and unstash the working directory before and after rebases
	autostash = true

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = p4merge
	# Get a third section, the original changes before ‘left’ and ‘right’ tried to change it
	conflictstyle = diff3
	# Get an error unless every merge is fast-forward
	ff = only

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

[push]
	default = current
	# Send local tags on `git push`
	followTags = true

[status]
	# Show all of the files underneath a new directory during a `git status`
	showUntrackedFiles = all


[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f

[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true

[mergetool]
	keepTemporaries = false
	prompt = false

[diff]
	# Enable improved diff algorithm (git 2.9)
	compactionHeuristic = true
	tool = icdiff

[difftool]
	prompt = false

[difftool "icdiff"]
	cmd = /usr/local/bin/icdiff --line-numbers $LOCAL $REMOTE

[log]
	date = iso
